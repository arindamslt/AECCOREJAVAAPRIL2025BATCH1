GITHUB LINK
======================================================================
https://github.com/arindamslt/AECCOREJAVAAPRIL2025BATCH1.git
DATE:08.04.2025
======================================================================================
FEATURES OF JAVA
==========================================================================================
1.PLATFORM INDEPENDENT
2.OBJECT ORIENTED PROGRAMMING
3.DISTRIBUTED
4.MULTITHREADING
X.java
javac X.java
X.java====Java Compiler=====Bytes code====X.class
RUN THE JAVA CODE
========================================
java X
X.class =====JVM(JAVA VIRTUAL MACHINE)=====O/P
JVM
==============================================
JAVA VIRTUAL MACHINE
============================================
IT IS AN ABSTRACT MACHINE WHOSE PURPOSE TO EXECUTE COMPILED JAVA CLASS

JDK===JAVA DEVELOPMENT KIT
JRE====JAVA RUNTIME ENVIRONMENT
JVM====JAVA VIRTUAL MACHINE
JIT====JUST IN TIME COMPILER
=================================================================================
OBJECT ORIENTED PROGRAMMING
====================================================================================
OBJECT==== REAL WORLD ENTITY
CLASS==== COLLECTION OF OBJECTS WITH COMMON PROPERTIES AND BEHAVIOUR
          IT IS A DEAD TEMPLATE
CHAIR TABLE BOOKSHELF   FURNITURE
COMMON PROPERTIES
=========================================
LENGTH
WIDTH
HEIGHT
KEEPING SOMETHGING
==============================================================================
JAVA VERSION===JAVA17 AND ONWARDS
NOTEPAD,NOTEPAD++
IDE==INTEGRATED DEVELOPMENT ENVIRONMENT
 ECLISPE,NETBEANS,STS,INTELIIJ

UML
===========================================================================
UNIFIED MODELLING LANGUAGE
PURPOSE
=======================================================================
TO DRAW THE CLASS DIAGRAM
CREATE A WORKSPACE
CREATE A JAVA PROJECT
FEATURES OF OBJECT ORIENTED PROGRAMMING(OOPS)
=================================================================================
1.ENCAPSULATION
2.POLYMORPHISM
   STATIC POLYMORPHISM
   DYNAMIC POLYMORPHISM
3.INHERITANCE
   SINGLE
   MULTILEVEL
   HIERARCHICAL
4.ABSTRACTION
5.DYNAMIC BINDING
ENCAPSULATION
==================================
CROCIN650
BINDING OF DATA AND METHOD TOGETHER
POLYMORHISM
==========================================================================
POLY MEANS MANY
MORPHISM MEANS FORM
TYPES OF POLYMORPHISM
================================================================================
STATIC POLYMORPHISM
=================================================================
IT DETECTS AT COMPILATION TIME
IT IS CALLED METHOD OVERLOADDING
TASK(int a,int b)
TASK(int a,float b)
TASK(double a,double b)
task(5,6)
task(5,6.5)
task(9.6,10.2)
METHOD OVERLOADDING
============================================================================
SAME METHOD NAME WITH DIFFERENT ARGUMENT PASSING WITH IN THE SAME CLASS AND THE 
BODY IS SAME
=======================================================================================
SUPER CLASS IN JAVA IS Object Class BELONGS TO java.lang.* PACKAGE
=================================================================================

CONSTRUCTOR
==================================================================
CONSTRUCTOR IS THE SAME NAME OF THE CLASS NAME
CONSTRUCTOR IS NOT EVEN VOID OR RETURN BECAUSE IT RETURN CLASS ITSELF
PURPOSE
============================================
1.CREATE THE OBJECT THE CLASS
2.AT THE TIME OF CREATING THE OBJECT INITIALIZE THE OBJECT.
CONSTRUCTOR OVERLOADDING
============================================================================
INHERITANCE
===============================================================================
AQUIRING THE PROPERTY FROM ONE CLASS TO ANOTHER CLASS
PARENT==CALLED SUPER CLASS
CHILD
TYPES OF INHERITANCE
=================================================
1.SINGLE INHERITANCE
=====================================================
IF PARENT HAVE ONLY ONE CHILD
2.MULTILEVEL INHERITANCE
===============================================================

3.HIERARCHICAL INHERITANCE
================================================================

4.MULTIPLE INHERITANCE
=================================================================
MULTIPLE INHERITANCE IS NOT SUPPORTED IN JAVA DUE TO AMBIGUITY PROBLEM

DYNAMIC POLYMORPHISM
==================================================
IT DETECTS AT THE RUN TIME.
IT IS CALLED METHOD OVERRIDDING
METHOD OVERRIDDING
===========================================================
SAME METHOD NAME IN PARENT CLASS AS WELL AS CHILD CLASS BUT BODY IS DIFFRENT\
UTILITY OF SUPER
==========================================
1.CALLING THE SUPER CLASS CONSTRUCTOR
2.CALLING THE SUPER CLASS METHOD WHICH IS HIDDEN IN SUBCLASS
ABSTRACTION
==============================================
NOT CLEAR
WHAT IS ABSTRACT CLASS?
THE CLASS HAVE ATLEAST ONE ABSTRACT METHOD
WHAT IS ABSTRACT METHOD?
A METHOD CONSIDERED TO  BE  ABSTRACT IF THE METHOD HAVE NO BODY
public void show()
{

}
public abstract  void show();======ABSTRACT METHOD
YOU CAN'T CREATE THE OBJECT OF THE ABSTRACT CLASS
DYNAMIC BINDING
==========================================================
IT DECIDES WHICH OBJECT WHICH METHOD TO BE CALLED AT THE RUN TIME.
=================================================================
DATE:09.04.2025
===================================================================================
THIS
===========================================================
TO INVOKE THE CURRENT OBJECT
SUPER
==================================================================
1.CALLING SUPER CLASS CONSTRUCTOR
2.CALLING THE SUPER CLASS METHOD WHICH IS HIDDEN IN SUBCLASS
PACKAGE
===============================================
PACKAGE IS COLLECTION OF SIMILLAR TYPES OF CLASSES 
MODIFIER
=================================================================================
MODIFIER TELLS HOW A MEMBER OF A CLASS IS BEING ACCESSED INTO ANOTHER CLASS
class Test
{
   int x=25;
}
class Test1
{
  int y=30;
}
LIST OF MODIFIER
=====================================================
public======================   
private          ACCESS SPECIFIER
protected
default=====================
static
final
abstract
synchronized
native
PRIVATE MEMBER ARE ACCESSABLE SAME CLASS ONLY
DEFAULT MEMBER ARE ACCESSABLE SAME CLASS AND IT'S SUBCLASS MUST  BE IN SAME PACKAGE
PUBLIC AND PROTECTED MEMBER ARE ACCESSABLE SAME CLASS AND IT'S SUBCLASS EVEN IF THEY
ARE IN DIFFERENT PACKAGE.

STATIC
=======================================================================
IF I WANT TO ACCESS THE STATIC MEMBER OF THE CLASS NO NEED TO CREATE THE OBJECT OF A CLASS
IT IS ACCEESSABLE BY MEANS OF CLASS NAME

STATIC BLOCK
==========================================================================
static{


}
IT EXECUTES FIRST AND ONLY ONCE.
IT ONLY ACCEPT STATIC VARIBLE
=================================================================================

IF WE DECLARE A VARIABLE IS FINAL IT IS CONSTANT
IF WE DECLARE A METHOD IS FINAL IT CAN'T BE OVERRIDDEN
IF WE DECLARE CLASS IS FINAL IT CAN'T BE INHERITED


NETSED CLASS
====================================
CLASS WITHIN CLASS
EX:
 class X{
    class  Y   =======NESTED CLASS
     {


      }
}
IF THE NESTED CLASS IS NON STATIC THEN IT IS CALLED INNER CLASS
OUTER CLASS MEMBER ARE ACCESSABLE TO THE INNER CLASS EVEN PRIVATE
INNER CLASS MEMBER ARE NOT ACCESSABLE TO OUTER CLASS
YOU CAN'T CREATE OBJECT OF INNER CLASS OUTSIDE THE OUTER CLASS
=======================================================================================
INTERFACE
=======================================================================================
INTERFACE IS AN CONTRACT BETWEEN THE IMPLEMENTED CLASS AND CLIENT CODE
IN INTERFACE BY DEFAULT ALL METHODS ARE PUBLIC AND ABSTRACT

CONSOLE INPUT OUTPUT
=======================================
TWO WAYS
========================================
BufferReader Class
Scanner Class
=========================================================================================

EXCEPTION HANDELLING
===================================================================================
EXCEPTION IS AN EVENT WHICH OCCUR DURING THE EXECUTION OF THE PROGRAM.
IF WE HANDLE THE EXCEPTION IT WILL PREVENT THE ABNORMAL TERMINATION OF PROGRAM
WHEN WE HANDLE THE EXCEPTION IS CALLED EXCEPTION HANDELLING
EXCEPTION HANDLE BY FIVE KEYWORDS
============================================================
try
catch
finally
throw
throws

=============================================================
EXCEPTION HIERARCHY
TYPES OF EXCEPTION
==========================================================================
1.UNCHECKED EXCEPTION
=======================================================================
RUNTIME EXCEPTION AND IT'S SUBCLASS CALLED UNCHECKED EXCEPTION
2.CHECKED EXCEPTION
=======================================================================
OTHER THAN RUNTIME EXCEPTION AND IT'S SUBCLASS CALLED CHECKED EXCEPTION
3.USERDEFINED OR CUSTOM EXCEPTION
=========================================================================
==========================================================================
DATE:10.04.2025
====================================================================================
SUBCLASS EXCEPTION SHOULD BE WRITTEN ABOVE SUPER CLASS EXCEPTION
HOW TO HANDLE EXCEPTION MESSAGE
================================================================
1.EXCEPTIONOBJECT.printStackTrace()=== EXCEPTION CLASS NAME ALONG WITH PACKAGE NAME
                                       EXCEPTION MESSAGE
                                       LINE NUMBER WHERE ERROR OCCURED
2.System.out.println(ExceptionObject)===>EXCEPTION CLASS NAME ALONG WITH PACKAGE NAME
                                         EXCEPTION MESSAGE
3.System.out.println(ExceptionObject.getMessage())===ONLY EXCEPTION MESSAGE
=====================================================================================
finally
=====================================================================================
WHETHER EXCEPTION OCCUR OR NOT FINALLY BLOCK ALWAYS EXECUTED
PURPOSE
=============================================================================
TO CLEAN UP THE TASK
===============================================================
USERDEFINED EXCEPTION
=================================================================
USER DEFINED EXCEPTION MUST THE SUBCLASS OF EXCEPTION CLASS
YOU HAVE TO THROW THE OBJECT EXPLICITLY
================================================================================
IF WE DO NOT WANT TO USE TRY AND CATCH BLOCK THEN WE WILL USE THROWS CLAUSE ALONG
WITH METHOD NAME.BUT THE THROWS CLAUSE MUST BE WRITTEN BOTH IN CALLER AS WELL AS
CALLE ENVIRONMENT
================================================================================
THROW CLAUSE HAS BEEN GENERALLY USED TO HANDLE  USER DEFINED OR CUSTOM EXCEPTION ===============================================================================
LIST OF EXCEPTION
=============================================
1.NullPointerException
2.ArrayIndexOutOfBoundException
3.InputMismatchException
4.NumberFormatException
5.StackOverFlowError
========================================================================================
STRING HANDELLING
=========================================================================================
"";
Test t=new Test();

=====================================================================================
STRING METHODS
==============================================================================
isEmpty()
trim()
indexOf()
lastIndexOf()
toUpperCase()
toLowerCase()
split()
replace()
subString()
=========================================================================================

toString()=====FROM OBJECT
===========================================================================================
============================================================================================
DATE:11.04.2025
=============================================================================================
MULTITHREADING
=============================================================================================
MULTIPROCESSING
==========================================================================
MULTIPLE PROCESS ARE RUNNING SIMULTENEOUSLY BY MEANS ONE OR MORE CPU
MULTITASKING==MULTIPLE TASKS RUNNING SIMULTENEOUSLY BY SINGLE CPU
MULTITHREADING===MULTIPLE THREADS ARE RUNNING SIMULTENEOUSLY
PURPOSE OF MULTIPLETHREADING
=====================================
1.PERFORMANCE ENHANCEMENT
2.BETTER MEMORY UTILIZATION
3.FASTER APPLICATION DEVELOPMENT.

LIFE CYCLE OR STAGES OF THE THREAD
======================================================================
CREATING OF THREAD
==========================================================
THREAD CAN BE CREATED IN TWO WAYS
=============================================
1.EXTENDING THE THREAD CLASS
2.IMPLEMENTING THE RUNNABLE INTERFACE
java.lang.*=======class ==== Thread
class X extends Thread
{



}
IMPLEMENTS RUNNABLE ALWAYS BETTER THAN EXTENDING THE THREAD CLASS.
1.WHEN EXTENDING THREAD CLASS  BECOMES HEAVY
2.IN CASE OF EXTENDING THREAD CLASS THE CHILD CLASS CAN'T THREAD FACILITY BECAUSE JAVA
DOES NOT SUPPORT MULTIPLE INHERITANCE
BUT IN CASE OF IMPLEMENTS RUNNABLE A SUBCALSS GET THE THREAD FACILITY.
===========================================================================================
THREAD SCHEDULING
============================================================================================
PRIORITY
=========================================================

TASK1         TASK2            TASK3
 3 DAYS        6 DAYS           10 DAYS
 5 HRS         3  HRS           1 HRS
PRIORITIES OF THREAD
=================================
PRIORITY IS RANGES BETWEEN 1 TO  10
1.MAX=========10
2.NORM=========5===BY DEFAULT
3.MIN==========1
======================================================================
DAEMON THREAD ARE LOW PRIORITY THREADS.IT WILL RUN IN THE BACKGROUND.
WHEN MAIN THREADS END IT WILL TERMINATE THE DAEMON THREAD NOT WAITING FOR THREAD
TO COMPLETE THE TASK.
================================================================================
1.SYNCHRONIZATION
=============================================================================
WHEN ONE THREAD ACCESSING THE SHARED RESOURCE OTHER THREAD HAVE TO WAIT TO GET RESOURCE
IN CASE OF SYNCHRONIZATION
2.SHARED RESOURCE
=====================================================
WHICH IS SHARED BY MULTIPLE THREADS
====================================================
3.MUTEX===MUTUALLY EXCLUSIVE LOCK
4.CRITICAL SECTION
5.DEADLOCK
6. CONSUMER PRODUCER PROBLEM
================================================================================
SYNCHRONIZATION IS ACHEIVED BY
==============================
1.SYNCHRONIZATION KEYWORD
================================================================================
IF WE USE SYNCHRONIZED KEYWORD IN METHOD THEN ENTIRE METHOD WILL BE SYNCHRONIZED.
THEREFORE, UNTIL AND UNLESS THE ENTIRE OPERATION OF THE METHOD HAVE NOT DONE OTHER
THREADS HAVE TO  WAIT.

2.SYNCHRONIZATION BLOCK
==========================
HERE ONLY PORTION OF THE BLOCK TO BE SYNCHRONIZED OTHER PART TO BE ACCESSED  BY MULTIPLE
THREAD.
===================================================================================
CONSUMER PRODUCER PROBLEM
===================================================================================
DATE:12.04.2025
===================================================================================
COLLECTION FRAMEWORK
====================================================================================
int x=25;
float y=10.5;
 Stream.of(names).forEach(System.out::println);
PROBLEM AREAS IN ARRAY
===============================================================
1.IT IS FIXED SIZE
2.IT ALLOW HOMOGENEOUS ELEMENTS
===================================================================
COLLETION IS AN OBJECT WHICH HOLDS GROUP OF OBJECTS.IT BELONGS TO THE 
java.util.* PACKAGE.
ARRAY                      VS                  COLLECTION
=======================================================================
1.IT IS FIXED SIZE                         1.IT IS DYNAMIC IN NATURE
2.IT ACCEPT ONLY HOMOGENEOUS ELEMENTS      2.IT ALLOW BOTH HOMOGENEOUS AND HETEROGENEOUS ELEMENTS
3.IN CASE OF MEMORY MANAGEMENT IT          3.IN CASE OF MEMORY MANAGEMENT IS RECOMMENDED
IS NOT RECOMMENDED
4.PERFORMANCE IS BETTER THAN COLLECTION    4.PERFORMANCE IS SOLWER THAN ARRAY
5.THER IS NO UNDERLYING DATA STRUCTURE     5.IN COLLECTION UNDERLYING DATASTRUCTURE IS THERE.
IS THERE.THEREFORE NO PREDEFINED METHODS     THEREFORE PREDEFINED METHODS AVAILABLE
AVAILABLE
ARRAYLIST
============================
1.IT IS A DYNAMIC ARRAY
2.UNDERLINE DATASTRUCTURE IS GROWABLE OR RESIZABLE ARRY
3.IT ALLOW BOTH HOMOGENEOUS AND HETEROGENEOUS ELEMENTS
4.INSERTION ORDER PRESERVED
5.DUPLICATION IS ALLOWED
==================================================================
CURSOR
==================================
Iterator=== TRAVERSE ONLY FORWARD DIRECTION
ListIterator===TRAVERS THE LEMENTS BOTH FORWARD AND BACKWARD DIRECTION
Enumerator
==================================
ForEach Loop
Stream API

Iterator itr=arr.iterator();
 while(itr.hasNext())
 {
	 System.out.println(itr.next());
 }
LINKED LIST
===============================================================
THE UNDERLYING DATA STRUCTURE IS DOUBLY LINKED LIST
INSERTION ORDER IS PRESERVED
IT IS GENARALLY USED FOR MIDDLE INSERTION AND DELETION
DUPLICATION IS ALLOWED
===============================================================
comparator==java.util.*===compare()
comparable==java.lang.*===compareTo()
===========================================================================
MAP
============================================================================
COMBINATION OF KEY & VALUE PAIRS WHERE KEY'S ARE NOT DUPLICATED VALUE
MAY BE DUPLICATED.
DATA WILL BE FETCHED BASED ON KEY
HASHMAP====DATA WILL BE FETCHED BASED ON HASHCODE OF KEY
LINKEDHASHMAP===DATA WILL BE FETCHED BASED ON ASCENDING ORDER OF KEY
TREEMAP=========DATA WILL BE FETCHED BASED ON ASCENDING ORDER OF KEY.
==============================================================================
POJO CLASS
===============================================================
POJO===PLAIN OLD JAVA OBJECT
DEFAULT CONSTRUCTOR
PARAMETERISED CONSTRUCTOR
GETTER()===TO GET A VALUE
SETTER()===TO SET A VALUE
===================================================================
HASHTABLE IMPLEMENTATION
===================================
5  A
2  B
6  C
15 D
23 E
16 F
=========================================================================
















